Database design should adhere to 3rd normal form (3NF) rules, and almost all tables that do not have a static/non-volatile natural key should use a surrogate key that is an autoincrementing integer. The “SMI”, “Division”, “Department” and “User” tables are all good examples of this.

There are many benefits to this, not the least of which is that there is a possibility that Division & Department names can and are sometimes changed. Changing the Name value should not affect the relational integrity of the database or require cascading updates to the key values throughout the database. Likewise, a User’s email address could change, although I expect that should be very infrequent, but this approach supports such kinds of unanticipated future changes. Theoretically, “SSN” would be a legitimate static/non-volatile natural key for Users; however, there are obvious legal and privacy/security reasons for not doing this.
 

Join tables supporting Many-to-Many relationships do not need to carry a surrogate autoincrementing key as long as the objects being joined in the M-2-M relationship will only be joined once, uniquely (as is usually the case). In this situation, the concatenation of the Join keys (FK1+FK2) is an entirely appropriate primary key for the join table, and the uniqueness of (FK1+FK2) within the table should be guaranteed by applying a constraint at the database level.

Note that the “Type” attribute in the “OriginatorJoin” table can be a simple Enum, since the values of “P” (Primary) and “A” (Additional) are clearly defined, and as a fundamental part of the application design are not subject to change. If other values are required in the future, they can be added to the Enum without breaking the existing data records or violating referential integrity. (While it would be possible to further break this out into an “OriginatorType” lookup table, that level of granularity is not likely to be beneficial, so an Enum associated with the Originator class will be completely acceptable for this.)
 

Separate lookup types should reside in their own individual lookup tables, rather than being grouped together into what is sometimes known as a “MUCK” table (see: Physical Data Modeling AntiPatterns - MUCK table designs (davewentzel.com). There are numerous benefits to this that I won’t go into here - but especially in the SMI application, each of these lookup tables has a slightly different behavior that is best supported by keeping them separated:

An SMI will belong to exactly 1 Division

An SMI may belong to multiple Departments, with no additional attributes required in the Join table

An SMI may belong to multiple Originators (Users), with an additional attribute required in the Join table (Primary/Additional).